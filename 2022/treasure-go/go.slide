Backend with Go
Treasure 2022
Tags: go

Shinya Suzuki
Gopher at CARTA HOLDINGS
@Yangyang_pareto
https://github.com/shinya-ml

* はじめに

* アイスブレーク

ブレイクアウトルームに分かれて色々話しましょう

- 好きなプログラミング言語
- 好きなエディタ
- Treasureの意気込みとか

* バックエンド講義の目標

APIの開発がいいかんじにできるようになる

いいかんじとは

- 自分で新しいAPIを開発できる
- 各レイヤーの責務を理解し、どこにどういう処理を書けばいいのかだいたいわかる
- 設計時に考慮しなければならないことがだいたいわかる

* 講義の進め方

いくつか課題を用意したので、コードを書いてもらったり議論したりします

たくさんコードを書きましょう

積極的に質問しましょう

- 自力で解決できないことはきっとある
- 聞けずに手が止まってしまうのはもったいない

自分の考えはどんどん言っていきましょう

- そこから新たな発見があったり、議論が盛り上がるかもしれません
- 間違ってたとしても、それはそれで学びがあるので恐れずに

* 質問するときのポイント

- 自分がなにをしたのか、どういうログやエラーメッセージが出ているのかといった事実を省かず具体的に伝える
- 自分がどこまでわかっていてどこがわからないのかを書くと、教える側もどこから教えればよいのか考えやすい
- 自力で解決するためにやったことがあればそれも伝える

* Go言語について

- 標準でいろいろそろっている (fmt, build, test, module...)
- 大体素朴な書き方になるので読みやすい
- Gopherくんかわいい

.image https://go.dev/blog/gopher/gopher.png

* Goに入ってはGoに従え

Goらしく書く

- 変数やpackageの命名に関するルール (こうすると良いというの) が言語化されている
- 標準ライブラリのコードを読んだりすると理解が深まるかも 
.link https://cs.opensource.google/go/go/+/master:src/io/io.go io
.link https://cs.opensource.google/go/go/+/master:src/net/http/ net/http

参考文献
.link https://go.dev/doc/effective_go Effective Go
.link https://github.com/golang/go/wiki/CodeReviewComments Go Code Review Comments
.link https://github.com/golang/go/wiki/TestComments Go Test Comments


* アーキテクチャ

.image ./img/arch.png 540 717

* アーキテクチャ設計で私が考えること

- 関心事の分離
- 依存の流れ

クリーンアーキテクチャでググると出てくるあの図に従うとかはする必要ない

上に書いてあることを守るために、必要になったら必要な層を足す

インターフェースも必要になったら作れば良い

* 各レイヤーの役割

- interface: API利用者 (Client) とのやりとりをする
- usecase: 利用者の目的を達成する
- domain/model: サービスの中心となるオブジェクトを定義する場所
- domain/repository: 永続化層とのやりとりをする
- interface/handler: HTTPリクエストを受け取り、レスポンスを返す
- interface/middleware: handlerの前後にやりたい処理をする (認可とかロギングとか)

* 関心事の分離

今回のアーキテクチャにおける、各レイヤーの関心事はざっくり以下の通り

- handler層: HTTP リクエスト / レスポンス
- usecase層: ビジネスロジック
- repository層: 永続化層 (DB) とのやりとり

各レイヤーが複数の関心事を持たないようにする

.link https://www.ogis-ri.co.jp/otc/hiroba/others/OOcolumn/single-responsibility-principle.html 単一責任の原則

- 変更しやすくなる
- 認知負荷を下げる
- テストしやすくなる

* 関心事を分けなくて4ぬ例: ファットコントローラー

コントローラー (今回でいうhandler的なレイヤー)にあらゆる関心事を書く

.code fat_controller.go

- 認知負荷の増大
- 様々な理由ですぐ壊れる


* ざっくり処理の流れ

.image ./img/sequence_diagram.png 540 780

* 現状できること

- 記事の一覧取得、特定の記事詳細の取得、記事の作成、更新、削除
- 記事に対するコメントの作成、削除
- 自身のユーザー情報の取得

* 適当なエンドポイントについて、コードを追ってみる

- 記事一覧を取得するAPIの流れを見てみよう

リクエストが来てからどういう流れでAPIがレスポンスを返すのか把握する

* APIファーストで開発する

- swagger.ymlをいじる
- DB側に変更が必要ならマイグレーションスクリプトを書く (マイグレーションについては後述)
- 新たにエンドポイントが必要なら生やす
- ロジックを書く

* Swagger 

OpenAPIというREST APIを記述するためのフォーマットでAPIを設計する際に用いるツール

OpenAPIという共通言語でAPIを定義することでフロント/バックのコミュニケーションがとりやすい

バックエンド側では、レスポンスに乗せるmodelの生成に使っている

.link https://swagger.io/docs/specification/about/ What is OpenAPI?
.link https://swagger.io/blog/api-strategy/difference-between-swagger-and-openapi/ difference between swagger and openapi


* DBのマイグレーション

システムを運用していくと、DBへの変更というのは何度も起こる

- テーブルの追加
- カラムの追加
- etc...

適用したいDDLをスクリプトとして管理し、適用されてないものだけ実行する

- DBがどの状態かわかる (=どのDDLまで適用されているか)
- 本番・ステージングといった複数環境への変更適用が楽 (マイグレーション流せば終わり)

* 今回使うマイグレーションツール

.link https://flywaydb.org/ flyway

`treasure-app-2022/database/migration/schema` にスクリプトがおいてある

ファイルの命名規則
.link https://flywaydb.org/documentation/concepts/migrations#versioned-migrations Versioned Migrations

.image ./img/migration_naming_convention.png 300 600

* DBに対して変更を加えたいとき

1. 前述の命名規則で新しいスクリプトファイルを作る (versionが既存のものより最新になるようにする)
2. *make* *flyway/migrate* で適用する
3. *make* *flyway/info* でちゃんと適用されてるか確認する

文法エラーなどでマイグレーションに失敗した場合

- *make* *flyway/info* すると該当バージョンのステータスがfailedになる
- 直したら *make* *flyway/repair* するとステータスがpending (適用前) に戻るので、再度マイグレーションする

* マイグレーションで注意したいこと

Undoはしない

- いわゆる変更の巻き戻し
- 例えば新たなカラムの追加を巻き戻すと、そのカラムのデータが消えることを意味する
- 変更したけどもとに戻したいときは、それを打ち消すマイグレーションスクリプトを書こう

アプリケーション側で問題が起きないかを意識する

- カラムの削除とかはアプリケーション側で参照している箇所があると壊れる
- 先にアプリケーション側で参照しないようにしてからDB側をいじるなど、安全にリリースすることを意識しよう


* Let's Go

* 課題1: 記事一覧を作成日時でソートできるようにしたい

- `GET/articles` で作成された記事一覧が取得できる
- 作成日時 (created_at) でORDER BYする
- クエリパラメータで昇順か降順かを指定して遅れるようにする
.link https://webtan.impress.co.jp/e/2012/04/26/12663#:~:text=%E3%80%8C%E3%82%AF%E3%82%A8%E3%83%AA%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%80%8D%E3%81%A8%E3%81%84%E3%81%86%E3%81%AE%E3%81%AF,%E6%AC%A1%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B%E3%80%82&text=%E3%81%93%E3%81%AE%E5%A0%B4%E5%90%88%E3%80%81%E3%80%8C%3F,gaiq%E3%80%8D%E3%81%8C%E3%82%AF%E3%82%A8%E3%83%AA%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%A0%E3%80%82 クエリパラメータとは

* 適当にブランチを切ってやってみよう

ブランチ名はなんでもいい

    $ git checkout -b your-name-kadai-1

PRを作る、誰のどの課題かがわかるようなPR名にしてくれると嬉しい

- 課題1 yanyanとか

* 作るときに考えたいこと

クエリパラメータないときは？
意図しない値がクエリパラメータに来たらどうする？

- ほっといたらSQLを実行するタイミングでエラー吐く
- クエリパラメータのバリデーションは誰の責任？

.link https://ikenox.info/blog/validation-in-clean-arch/ バリデーションはどこでやるべきか

* ヒント (どこから手を付けていいかわからない人向け)

- まずswagger.ymlの `GET/articles` の定義を見てみよう 
- そこにクエリパラメータの定義を足してみる
.link https://swagger.io/docs/specification/2-0/describing-parameters/ swagger パラメータの書き方
- クエリパラメータはHTTP リクエストに乗ってくるものなので、handler層で処理しよう
.link https://pkg.go.dev/net/url#URL.Query クエリパラメータのとり方
- クエリパラメータから取得した値をhandler->usecase->repositoryと流して、SQL文にORDER BY句を足そう

* PRを見ていく

* 課題2: 記事についたコメント一覧を取ってこれるようにしたい

- コメントの作成と削除はすでにできる
- ある記事のコメント一覧取得と、コメントの更新ができるエンドポイントを新しく作る

速攻でできちゃった人は

- 削除と更新は自分のコメントだけできる状態にする

* ブランチ切ってやってみよう

設計するときに考えてほしいポイント

- エンドポイントのURIどうする？
- HTTPメソッドは？
- Request / Response Body どうする？
- HTTP Status Code

* ヒント (どこから手をつけていいかわからない人向け)

- swagger.ymlにAPIの定義を足してみる (すでにある定義を参考にしてみよう)
- server.goにエンドポイントを生やす
- usecase, repository層に処理を書く

* 課題3: 記事にタグを付けたい

GoでAPI書きました！！みたいな記事ならGo, WebAPIみたいなタグをつける的な

- タグを作成できる
- 記事にタグを付ける
- 関連する（= 同じタグがついてる）記事をもってくる

順番に作っていく

* 課題3.1: タグを作成できるようにする

- 記事につけるためのタグを作れるようにする

* ポイント

- 課題2と同じポイント
- 作られたタグを管理するテーブル
- タグの重複を許すか許さないか問題

* PRを見ていく

* コラム: 良いAPIとは

- どんなAPIが良い設計だと思う？
- ブレイクアウトルームに分かれて議論してみよう

* 良いAPIとは (私の考え)

_正しい使い方をするのが簡単で、間違った使い方をするのが難しい_

- つまり、APIを使う側のことを考えて設計しよう (Client First)
- URIを見ればなにをするAPIなのかわかる
- 命名の一貫性
- 適切なレスポンス設計

読めば使い方がわかる、使えるAPIは良い

- 変更しやすいとか、頑健であるとか他にも色々な観点はある

* 課題3.2: 記事にタグを付けれるようにしたい

- 3.1で作ったタグを記事と紐付けれるようにしたい
- 記事作成時にタグをつけれるようにする
- 記事の更新時にタグも更新できるようにする

* ポイント

- 3.1と同様の話
- 記事とタグをどうやって紐付ける？
- 記事の更新時にタグも更新できるようにするには？
- 記事の更新時、すでについてるタグがRequestで送られてこなかったときの解釈 (つけたまま？それとも外してしまう？)
- 作成されていないタグをつけようとしたらどうなる？

* PRを見ていく

* 課題3.3: ある記事に関連する記事を取得できるようにする

- ある記事と同じタグをもつ記事たちを取ってくる

* ポイント

- エンドポイント設計
- どうやって同じタグをもつ記事を引っ張ってくるか

* PRを見ていく

* コラム: GraphQLという選択肢

GraphQLはクエリ言語とクエリを実行するサーバーサイドエンジンの仕様である

.link https://graphql.org/ graphql.org

- スキーマ定義を読めばどうクエリするとどんなデータが返ってくるかがわかる
- クライアント側がほしいフィールドだけリクエストすることができる
- 様々なユースケースに対して柔軟なクエリが書ける

GraphQLとRESTは全く別物 (片方が一方の上位互換というわけではない)


* 課題4: 他のユーザーをフォローできるようにしたい

- ユーザーをフォローする、フォロー解除する
- 自分がフォローしたユーザー一覧を見れるようにする
- フォローしたユーザーの記事一覧を見れるようにする

* ポイント

- フォロー/アンフォローのAPI設計どうする?
- 他人のフォロー情報見れるようにする？
- フォローしたユーザーの記事一覧を出すAPI設計は？

* PRを見ていく

* おわりに

* フルサイクル開発

- 開発者はサービスのサイクル全体にオーナーシップを持とうという考え方
- 今回やったような、与えられた要件に従って開発するだけが仕事ではない
- その機能の必要性や重要性を考えるところから、どうつくるのか、作ってから運用してみてどうだったかまでを作った人が責任を持つ

.link https://techblog.cartaholdings.co.jp/entry/2019/02/04/171325 Netflixにおけるフルサイクル開発者-開発したものが運用する

*チーム開発ではフルサイクルな開発を意識してほしい*

- フロントが得意だからといってフロントだけをやるのではもったいない
- 自分が作りたい機能の実現に必要なことは全部やってみてほしい

* コンフォートゾーンのちょっと外側に行く

- 今の自分にとって苦手なこと、できないことにチャレンジする
- 成長してコンフォートゾーンが広がると、別の課題が見えてきてチャレンジできる幅が広がる

.image ./img/comfort_zone.png 350 550

.link http://slope.valuesv.jp/2020/07/01/%E6%88%90%E9%95%B7%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF%E3%80%8C%E3%82%B3%E3%83%B3%E3%83%95%E3%82%A9%E3%83%BC%E3%83%88%E3%82%BE%E3%83%BC%E3%83%B3%E3%80%8D%E3%82%92%E5%87%BA%E3%82%88/ [出典]成長するには「コンフォートゾーン」を出よ

* チーム開発で意識してほしいこと

「やること」と「やらないこと」を決める

- やりたいと思ったことすべてを実現することはできない
- 自分たちにとって必要・重要だと思うことと、あったらよさそうだけど重要ではないと思うことを分けてみよう

* チーム開発で意識してほしいこと

たくさんデプロイしよう

- 開発 -> リリース -> 触ってみる -> 改善 のサイクルを小さく早くたくさん回す
- 本番環境で触ってみて初めて分かることもある
- とにかく、たくさんコードを書いてほしい

* コラム: おすすめ本

.link www.amazon.co.jp/dp/4048930656 Clean Architecture
.link www.amazon.co.jp/dp/4873116864 Web API: The Good Parts
.link www.amazon.co.jp/dp/B09HK66P5X デザインパターン入門
.link www.amazon.co.jp/dp/B09B8LFKQL A Philosophy of Software Design
.link www.amazon.co.jp/dp/4873119693 実用Go言語
