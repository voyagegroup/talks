Backend with Go
Treasure 2022
Tags: go

Shinya Suzuki
Gopher at CARTA HOLDINGS
@Yangyang_pareto
https://github.com/shinya-ml

* はじめに

* アイスブレーク

ブレイクアウトルームに分かれて色々話しましょう

- 好きなプログラミング言語
- 好きなエディタ
- Treasureの意気込みとか

* バックエンド講義の目標

APIの開発がいいかんじにできるようになる

いいかんじとは

- どこを触ればAPIが作れるのか勘所がわかる
- 設計時に考慮しなければならないことがだいたいわかる

* 講義の進め方

いくつか課題を用意したので、コードを書いてもらったり議論したりします

たくさんコードを書きましょう

積極的に質問しましょう

- 自力で解決できないことはきっとある
- 聞けずに手が止まってしまうのはもったいない

自分の考えはどんどん言っていきましょう

- そこから新たな発見があったり、議論が盛り上がるかもしれません
- 間違ってたとしても、それはそれで学びがあるので恐れずに

* 事前課題どうだった？

- 事前課題とかGoどうだった？を適当に聞く

* Go言語について

- 標準でいろいろそろっている (fmt, build, test, module...)
- 大体素朴な書き方になるので読みやすい
- Gopherくんかわいい

.image https://go.dev/blog/gopher/gopher.png

* Goに入ってはGoに従え

Goらしく書く

- 変数やpackageの命名に関するルール (こうすると良いというの) が言語化されている
- 標準ライブラリのコードを読んだりすると理解が深まるかも 
.link https://cs.opensource.google/go/go/+/master:src/io/io.go io
.link https://cs.opensource.google/go/go/+/master:src/net/http/ net/http

参考文献
.link https://go.dev/doc/effective_go Effective Go
.link https://github.com/golang/go/wiki/CodeReviewComments Go Code Review Comments
.link https://github.com/golang/go/wiki/TestComments Go Test Comments


* アーキテクチャ

.image ./img/arch.png 540 717

* 各レイヤーの役割

- interface: API利用者 (Client) とのやりとりをする
- usecase: 利用者の目的を達成する
- domain/model: サービスの中心となるオブジェクトを定義する場所
- domain/repository: 永続化層とのやりとりをする

* 現状できること

- 記事の一覧取得、特定の記事詳細の取得、記事の作成、更新、削除
- 記事に対するコメントの作成、削除
- 自身のユーザー情報の取得

* 適当なエンドポイントについて、コードを追ってみる

- 記事を作成するAPIの流れを見てみよう

リクエストが来てからどういう流れでAPIがレスポンスを返すのか把握する

* APIファーストで開発する

- swagger.ymlをいじる
- 新たにエンドポイントが必要なら生やす
- ロジックを書く
- 完

* Let's Go

* 課題1: 記事一覧を任意の項目でソートできるようにしたい

- `GET/articles` で作成された記事一覧が取得できる
- SQLにORDER BY句を付け足して任意のカラムでソートできるようにする
- クエリパラメータでどのカラムでソートするかを送る

* 適当にブランチを切ってやってみよう

ブランチ名はなんでもいい

    $ git checkout -b your-name-kadai-1

PRを作る、誰のどの課題かがわかるようなPR名にしてくれると嬉しい

- 課題1 yanyanとか

* 作るときに考えたいこと

- クエリパラメータないときは？
- 意図しない値がクエリパラメータに来たらどうする？
    - ほっといたらSQLを実行するタイミングでエラー吐く
    - クエリパラメータのバリデーションは誰の責任？

.link https://ikenox.info/blog/validation-in-clean-arch/ バリデーションはどこでやるべきか

* PRを見ていく

* 課題2: 記事についたコメント一覧を取ってこれるようにしたい

- コメントの作成と削除はすでにできる
- ある記事のコメント一覧取得と、コメントの更新ができるエンドポイントを早そう

速攻でできちゃった人は

- 削除と更新は自分のコメントだけできる状態にする

* ブランチ切ってやってみよう

* 課題3: 記事にタグを付けたい

GoでAPI書きました！！みたいな記事ならGo, WebAPIみたいなタグをつける的な

- タグを作る
- 記事にタグを付ける
- 関連する（= 同じタグがついてる）記事をもってくる

一気にやるのはむずいので、段階的に作っていく

* 課題3.1: タグを作成できるようにしたい

- あらかじめ作成されたタグだけ記事につけれることにする
- タグの作成と作成されたタグが一覧できるようにする

* Let's discussion

ブレイクアウトルームに分かれて議論してみよう

- エンドポイントのURIどうする？
- HTTPメソッドは？
- Request / Response Body どうする？
- HTTP Status Code

* PRを見ていく

* コラム: 良いAPIって...なんだろう

- どんなAPIが良い設計だと思います？
- ブレイクアウトルームに分かれて議論してみよう

* 良いAPIとは (私の考え)

_正しい使い方をするのが簡単で、間違った使い方をするのが難しい_

- つまり、APIを使う側のことを考えて設計しよう (Client First)
- URIを見ればなにをするAPIなのかわかる
- 命名の一貫性
- 適切なレスポンス設計

読めば使い方がわかる、使えるAPIは良い

* 課題3.2: 記事にタグを付けれるようにしたい

- 3.1で作ったタグを記事と紐付けれるようにしたい
- 記事作成時にタグをつけれるようにする
- 記事の更新時にタグも更新できるようにする

* Let's discussion

- 3.1と同様の話
- 記事とタグをどうやって紐付ける？
- 記事の更新時にタグも更新できるようにするには？
- 作成されていないタグをつけようとしたらどうなる？

* PRを見ていく

* 課題4: 他のユーザーをフォローできるようにしよう

- ユーザーをフォローする、フォロー解除する
- 自分がフォローしたユーザー一覧を見れるようにする
- フォローしたユーザーの記事一覧を見れるようにする

* Let's discussion

- フォロー/アンフォローのAPI設計どうする?
- 他人のフォロー情報見れるようにする？
- フォローしたユーザーの記事一覧を出すAPI設計は？

* PRを見ていく

* おわりに

* フルサイクル開発

- 開発者はサービスのサイクル全体にオーナーシップを持とうという考え方
- 今回やったような、与えられた要件に従って開発するだけが仕事ではない
- その機能の必要性や重要性を考えるところから、どうつくるのか、作ってから運用してみてどうだったかまでを作った人が責任を持つ

.link https://techblog.cartaholdings.co.jp/entry/2019/02/04/171325 Netflixにおけるフルサイクル開発者-開発したものが運用する

*チーム開発ではフルサイクルな開発を意識してほしい*

- フロントが得意だからといってフロントだけをやるのではもったいない
- 自分が作りたい機能の実現に必要なことは全部やってみてほしい

.link https://www.redbull.com/jp-ja/escape-comfort-zone コンフォートゾーンから抜け出す方法

* チーム開発で意識してほしいこと

「やること」と「やらないこと」を決める

- やりたいと思ったことすべてを実現することはできない
- 自分たちにとって必要・重要だと思うことと、あったらよさそうだけど重要ではないと思うことを分けてみよう

* チーム開発で意識してほしいこと

たくさんデプロイしよう

- 開発 -> リリース -> 触ってみる -> 改善 のサイクルを小さく早くたくさん回す
- 本番環境で触ってみて初めて分かることもある
- とにかく、たくさんコードを書いてほしい

* コラム: おすすめ本

.link www.amazon.co.jp/dp/4048930656 Clean Architecture
.link www.amazon.co.jp/dp/4873116864 Web API: The Good Parts
.link www.amazon.co.jp/dp/B09HK66P5X デザインパターン入門
.link www.amazon.co.jp/dp/B09B8LFKQL A Philosophy of Software Design
.link www.amazon.co.jp/dp/4873119693 実用Go言語
