Backend with Go
Treasure 2022
Tags: go

Shinya Suzuki
Gopher at CARTA HOLDINGS
@Yangyang_pareto
https://github.com/shinya-ml

* はじめに

* 自己紹介

鈴木進也

- 社内ではやんやんと呼ばれています
- 趣味: Valorant/散財

.image ./img/me.JPG 300 250

* アイスブレーク

ブレイクアウトルームに分かれて色々話しましょう

- 好きなプログラミング言語
- 好きなエディタ (宗教戦争はやめようね！！)
- Treasureの意気込みとか

* バックエンド講義の目標

APIの開発がいいかんじにできるようになる

いいかんじとは

- どこを触ればAPIが作れるのか勘所がわかる
- 考慮しなきゃいけないことがなんとなくわかる

* 講義の進め方

いくつか課題を用意したので、コードを書いてもらったり議論したりします

たくさんコードを書きましょう

積極的に質問しましょう

- 自力で解決できないことはきっとある
- 聞けずに手が止まってしまうのはもったいない

自分の考えはどんどん言っていきましょう

- そこから新たな発見があったり、議論が盛り上がるかもしれません
- 間違ってたとしても、それはそれで学びがあるので恐れずに

* 事前課題どうだった？

- 事前課題とかGoどうだった？を適当に聞く

* Go言語について

- 標準でいろいろそろっている (fmt, build, test, module...)
- 大体素朴な書き方になるので読みやすい

* Goに入ってはGoに従え

Goらしく書く

.link https://go.dev/doc/effective_go Effective Go
.link https://github.com/golang/go/wiki/CodeReviewComments Go Code Review Comments
.link https://github.com/golang/go/wiki/TestComments Go Test Comments

余裕があったら読んでみてください。

レビューしていく中で具体例を話せたら

* アーキテクチャ

ここは変えないなら去年の踏襲する

* 構成

ここもそう

* 適当なエンドポイントについて、コードを追ってみる

リクエストが来てからどういう流れでAPIがレスポンスを返すのか把握する

* APIファーストで開発する

- swagger.ymlをいじる
- 新たにエンドポイントが必要なら生やす
- ロジックを書く
- 完

* Let's Go

* 課題1: 記事一覧を作成日時でソートできるようにしたい

- `GET/articles` で作成された記事一覧が取得できる
- SQLにORDER BY句を付け足して作成日時でソートできるようにする
- クエリパラメータで昇順か降順か選べるようにする

* 適当にブランチを切ってやってみよう

ブランチ名はなんでもいい

    $ git checkout -b your-name-kadai-1

PRを作る、誰のどの課題かがわかるようなPR名にしてくれると嬉しい

- 課題1 yanyanとか

* PRを見ていく

* 課題2: 記事詳細を取ってくる際にコメントも取れるようにしたい

- `GET/articles/{article_id}` で記事の詳細が取ってこれる
- 一緒にその記事についてるコメントも取れるようにしたい

* ブランチ切ってやってみよう

* 課題3: 記事にタグを付けたい

GoでAPI書きました！！みたいな記事ならGo, WebAPIみたいなタグをつける的な

- タグを作る
- 記事にタグを付ける
- 関連する（= 同じタグがついてる）記事をもってくる

一気にやるのはむずいので、段階的に作っていく

* 課題3.1: タグを作成できるようにしたい

- あらかじめ作成されたタグだけ記事につけれることにする
- タグの作成と作成されたタグが一覧できるようにする

* Let's discussion

ブレイクアウトルームに分かれて議論してみよう

- エンドポイントのURIどうする？
- HTTPメソッドは？
- Request / Response Body どうする？
- HTTP Status Code

* PRを見ていく

* コラム: 良いAPIって...なんだろう

- どんなAPIが良い設計だと思います？
- ブレイクアウトルームに分かれて議論してみよう

* 良いAPIとは (私の考え)

_正しい使い方をするのが簡単で、間違った使い方をするのが難しい_

- つまり、APIを使う側のことを考えて設計しよう (Client First)
- URIを見ればなにをするAPIなのかわかる
- 命名の一貫性
- 適切なレスポンス設計

読めば使い方がわかる、使えるAPIは良い

* 課題3.2: 記事にタグを付けれるようにしたい

- 3.1で作ったタグを記事と紐付けれるようにしたい
- 記事作成時にタグをつけれるようにする
- 記事の更新時にタグも更新できるようにする

* Let's discussion

- 3.1と同様の話
- 記事とタグをどうやって紐付ける？
- 記事の更新時にタグも更新できるようにするには？
- 作成されていないタグをつけようとしたらどうなる？

* PRを見ていく

* 課題4: 他のユーザーをフォローできるようにしよう

- ユーザーをフォローする、フォロー解除する
- 自分がフォローしたユーザー一覧を見れるようにする
- フォローしたユーザーの記事一覧を見れるようにする

* Let's discussion

- フォロー/アンフォローのAPI設計どうする?
- 他のユーザーが自分のフォロー情報見れないようにするには？

* PRを見ていく

* おわりに

* フルサイクル開発

- 開発者はサービスのサイクル全体にオーナーシップを持とうという考え方
- 今回やったような、与えられた要件に従って開発するだけが仕事ではない
- その機能の必要性や重要性を考えるところから、どうつくるのか、作ってから運用してみてどうだったかまでを作った人が責任を持つ

.link https://techblog.cartaholdings.co.jp/entry/2019/02/04/171325 Netflixにおけるフルサイクル開発者-開発したものが運用する

*チーム開発ではフルサイクルな開発を意識してほしい*

* チーム開発で意識してほしいこと

「やること」と「やらないこと」を決める

- やりたいと思ったことすべてを実現することはできない
- 自分たちにとって必要・重要だと思うことと、あったらよさそうだけど重要ではないと思うことを分けてみよう

* チーム開発で意識してほしいこと

たくさんデプロイしよう

- 開発 -> リリース -> 触ってみる -> 改善 のサイクルを小さく早くたくさん回す
- 本番環境で触ってみて初めて分かることもある
- とにかく、たくさんコードを書いてほしい

* コラム: おすすめ本

.link www.amazon.co.jp/dp/4048930656 Clean Architecture
.link www.amazon.co.jp/dp/4873116864 Web API: The Good Parts
.link www.amazon.co.jp/dp/B09HK66P5X デザインパターン入門
.link www.amazon.co.jp/dp/B09B8LFKQL A Philosophy of Software Design
.link www.amazon.co.jp/dp/4873119693 実用Go言語
