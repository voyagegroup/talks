Backend with Go
Treasure2021版
Tags: go

Jumpei Chikamori
Gopher at VOYAGE GROUP
@pei0804
https://github.com/pei0804

* この資料について

VOYAGE GROUPの学生エンジニア向けインターンシップTreasureの2021年度版講義資料です。

.link https://github.com/voyagegroup/talks
.link https://talks.godoc.org/github.com/voyagegroup/talks/2021/treasure-go/go.slide

* はじめに

* アイスブレイク

- 自己紹介。
- 好きな言語。
- 好きなエディタ。
- 最近つくってるもの。

ブレイクアウトルームに分けます。

* About Treasure

- バックグラウンドの違うみなさんが3週間過ごします。
- どんどん話してください。
- コードを書いて、質問して、がっつり勉強してください。

Enjoy! :)

* バックエンド講義のゴール

- 一通り小さなWebアプリケーションを書けるようになること。
- Goのコードの書き方に慣れること。

とにかくどんどんコードを書きましょう。

.image https://golang.org/doc/gopher/project.png

* 質問はガンガン投げてほしい

仮に講義に関係ないものでも、後日回答していくので、何でも聞いていいぞ！
Slackでも、口頭でも何でもおｋ。

* 事前課題

* 事前課題 1

README.md通りに進めると出来上がります。
.link https://github.com/VG-Tech-Dojo/treasure-app-2021

環境構築出来ましたか？

* 事前課題 2 記事削除

PR見ていく。

* 事前課題 3 記事更新

PR見ていく。

* Goどうだった？

適当に聞いていく。

* Goにした理由

- 開発にほしいものが標準で揃ってる（fmt, mod, build, test）。
- 書き方に大きな違いが発生しにくいので、レビューしやすい。

* ベースアプリのアーキテクチャ

それぞれの層ってどういう役割？を聞いてみる。

- interface
- usecase
- domain
- domain/repository
- domain/model

* ベースアプリのアーキテクチャ

.image ./assets/arch.png 540 717

* ベースアプリの構成

- cmd コマンド。
- app アプリケーションコード置き場。
- app/db データベース系。
- app/interfaces 利用者とのやり取り。
- app/usecase 利用者の目的を達成する部分。例えば、記事を投稿する。
- app/domain ビジネスロジック。
- app/domain/repository 永続化層とのやり取り。
- app/domain/model 型定義。

* Let's Go.

* 課題 1

- GET /articles でタイトル検索出来るようにしたい。

クエリパラメータで検索文字列を受け取って、SQLでLIKEを使って検索しよう。

.link https://pkg.go.dev/github.com/gorilla/mux#Vars mux.Vars

* 課題の進め方

* 作業ブランチを切ってPRを作る

ブランチ名は何でもいいけど、課題毎に作業ブランチ切って、PRを作ってください。PR名は、課題1 名前とか。

    git checkout -b name-kadai-1

* API First

API Firstで開発しよう。

1. treasure-app-2021/swagger/swagger.yamlを編集する
2. treasure-app-2021/backend/で make genする
3. 必要に応じてendpointを生やす
4. ロジックを作る

後半の開発も、まずはAPIを決めて、APIでコミュニケーションを取っていきましょう。

.link https://developer.ntt.com/ja/blog/58aa2ca4-ef7c-4f50-86b6-b5758df58de6 APIファーストで開発するメリットとは？
.link https://stoplight.io/studio/ Stoplight Studioを使うのがおすすめ

* REST API 参考資料

.link https://developer.mozilla.org/ja/docs/Web/HTTP/Status MDN Web docs

.link https://www.oreilly.co.jp/books/9784873116860/ Web API: The Good Parts

.link https://developer.github.com/v3/ Github REST APIv3

.link https://qiita.com/mserizawa/items/b833e407d89abd21ee72#%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%82%BD%E3%83%BC%E3%83%88%E6%A4%9C%E7%B4%A2%E3%81%AF%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%A7%E3%82%84%E3%82%8D%E3%81%86 翻訳: WebAPI 設計のベストプラクティス

* 命名規則

Railsを参考にしました。
命名などで悩まず、今日はガンガン書いてほしい意図で採用しているだけなので、基本的には自由です。

.link https://railsguides.jp/routing.html ルーティング

.link https://railsguides.jp/active_record_basics.html アクティブレコード

* レビュー

適当にPR見ていく。

* コラム: Swaggerとは

.link https://swagger.io/ Swagger

APIのドキュメント化に使えるツール。今回はSwagger2を使っている。
ちなみに、OpenAPI3とSwagger2は別物になる。元々はSwaggerフレームワークの一部だったけど、色々あったらしい。

なぜ、OpenAPI3ではなく、Swagger2を採用したか？
それは、関連するツールがSwagger2には対応してるけど、OpenAPI3には対応してないパターンが多いから。
私も過去に、Swagger2系のOSSを作っていたので分かるけど、Swagger2とOpenAPI3に全然互換性がなくて、追従出来なくてやる気を失ったことがある。使い込まれてるツールほど、後から出てきたOpenAPIに追従出来ていない現状がある。

.link https://ackintosh.github.io/blog/2018/05/12/openapi-generator/ OpenAPI Generator - community drivenで成長するコードジェネレータ
.link https://swagger.io/blog/api-strategy/difference-between-swagger-and-openapi/ What Is the Difference Between Swagger and OpenAPI?

* 課題 2

- GET /articles/{article_id} で記事詳細を取ってきた時に、作成者の情報も返したい。

* 作業ブランチを切ってPRを作る

    git checkout -b name-kadai-2

* レビュー

適当にPR見ていく。

* コラム: アーキテクチャをどのように考えるか

なんか書く。

* 課題 3

- 記事へコメント。API設計も含めてやる。

要件

- 記事へコメントが出来る。
- 誰がコメントしたか分かる
- コメントはコメント作成者のみ削除できる。

* ディスカッションしてみよう

ブレイクアウトルームへ分かれます。

- エンドポイントのパスは？
- HTTPメソッドは何が望ましい？
- Request Body
- Response Body
- HTTP Status Code

終わったら、何人か当てて、どんなAPIにするか聞いてみる。

* 作業ブランチを切ってPRを作る

    git checkout -b name-kadai-3

* レビュー

適当にPR見ていく。

* コラム: どこでバリデーションするか？

- 他人の記事消そうとしたら？
- そもそもパラメーターが期待しているものと違う？
- 自分以外のコメントを削除しようとしたら？

* 課題 4

プロフィール情報が取得できるエンドポイント。API設計も含めてやる。

* ディスカッションしてみよう

ブレイクアウトルームへ分かれます。

- エンドポイントのパスは？
- HTTPメソッドは何が望ましい？
- Request Body
- Response Body
- HTTP Status Code

* 作業ブランチを切ってPRを作る

    git checkout -b name-kadai-4

* レビュー

適当にPR見ていく。

* 課題5

記事にタグ付けする。

要件

- タグは作成できる。
- 記事投稿時にタグをつけれる。
- 記事更新時にタグを更新できる。

* ディスカッションしてみよう

ブレイクアウトルームへ分かれます。

- エンドポイントのパスは？
- HTTPメソッドは何が望ましい？
- Request Body
- Response Body
- HTTP Status Code

* 作業ブランチを切ってPRを作る

    git checkout -b name-kadai-5

* まとめ

* フルサイクル開発するということ

わたしと組織の話。

* Beyond the twelve factor app

こういうこと意識するんじゃよっていう話

.link https://tanzu.vmware.com/content/blog/beyond-the-twelve-factor-app Beyond the twelve factor app